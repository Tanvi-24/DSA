package org.example.DynamicProgramming;
/*
    minPathSum() тАУ Top to Bottom (Right & Down)
    рд╣реЗ function top-left (0,0) рдкрд╛рд╕реВрди bottom-right (m-1,n-1) рдкрд░реНрдпрдВрдд рдкреЛрд╣реЛрдЪрд╛рдпрдЪрдВ рдЖрд╣реЗ.
    move рдлрдХреНрдд right рдХрд┐рдВрд╡рд╛ down рдХрд░реВ рд╢рдХрддреЛ.
    рдкреНрд░рддреНрдпреЗрдХ cell рдордзреНрдпреЗ рдПрдХ cost рдЖрд╣реЗ рдЖрдгрд┐ рддреБрд▓рд╛ рддреНрдпрд╛ рдорд╛рд░реНрдЧрд╛рдЪрд╛ minimum total cost рд╣рд╡рд╛ рдЖрд╣реЗ.
    f(i,j) рдореНрд╣рдгрдЬреЗ (0,0) рддреЗ (i,j) рдкрд░реНрдпрдВрдд рдЬрд╛рдпрдЪрд╛ minimum cost.
    рддреБрдореНрд╣реА рдЬрд░ i==0 && j==0 рдЖрд╣рд╛рдд, рддрд░ starting point рдЖрд╣реЗ.
    рдЬрд░ рдмрд╛рд╣реЗрд░ рдЧреЗрд▓рд╛рдд (i<0 рдХрд┐рдВрд╡рд╛ j<0), рддрд░ рддреЗ invalid рдорд╛рдирд▓рдВ рдЬрд╛рддрдВ.
    рд╡рд░реВрди (top) рдХрд┐рдВрд╡рд╛ рдбрд╛рд╡реАрдХрдбреВрди (left) рдпреЗрдКрди рддреБрд▓рд╛ minimum path рд╡рд╛рдкрд░рд╛рдпрдЪрд╛ рдЖрд╣реЗ.
    Recursive call рдордзреНрдпреЗ рджреЛрдиреНрд╣реА рдмрд╛рдЬреВрдиреЗ check рдХрд░реВрди min рдШреЗрддреЛ.
    рд╣рд╛ DP with memoization рдЖрд╣реЗ, рдореНрд╣рдгрдЬреЗ рдПрдХрджрд╛ рдХреЗрд▓реЗрд▓реА calculation reuse рдХрд░рддреЛ.
    ЁЯФ╕ minimumPathSum() тАУ Bottom to Top (Right & Up)
    рд╣реЗ function рд╕реБрд░реВ рд╣реЛрддрдВ bottom-left (m-1, 0) рдкрд╛рд╕реВрди, рдЖрдгрд┐ рдЬрд╛рдпрдЪрдВ рдЖрд╣реЗ top-right (0, n-1) рдкрд░реНрдпрдВрдд.
    move рдлрдХреНрдд right рдХрд┐рдВрд╡рд╛ up рдХрд░реВ рд╢рдХрддреЛ.
    рд╣реНрдпрд╛ рд╡реЗрд│реЗрд╕ рдЖрдкрд▓реНрдпрд╛рд▓рд╛ maximum path sum рд╣рд╡рд╛ рдЖрд╣реЗ.
    findSum(r,c) рдореНрд╣рдгрдЬреЗ (m-1,0) рдкрд╛рд╕реВрди (0,n-1) рдкрд░реНрдпрдВрдд рдкреЛрд╣рдЪрд╛рдпрдЪрдВ max sum.
    рдЬрд░ рддреБрдореНрд╣реА r==-1 рдХрд┐рдВрд╡рд╛ c==grid[0].length рдкрд░реНрдпрдВрдд рдЧреЗрд▓рд╛, рддрд░ invalid рдЖрд╣реЗ.
    рдЬрд░ (0,n-1) рд▓рд╛ рдкреЛрд╣реЛрдЪрд▓рд╛рдд, рддрд░ return that cell value.
    up рдЖрдгрд┐ right рджреЛрдиреНрд╣реА direction try рдХрд░реВрди max() рдШреЗрддреЛ.
    рд╣реЗ рдкрдг DP with memoization рдЖрд╣реЗ, рдПрдХрджрд╛ рдХреЗрд▓реЗрд▓реА calculation рдкреБрдиреНрд╣рд╛ use рдХрд░рддреЛ.
    Example Output:
    grid = {{1,3,1},{1,5,1},{4,2,1}}
    тЮбя╕П top to bottom min sum = 7
    grid2 = {{0, 0, 0, 0, 5},{0, 1, 1, 1, 0},{2, 0, 0, 0, 0}}
    тЮбя╕П bottom to top max sum = 7
 */
public class MinimumPathSum {

    //moves right and bottom
    public static int minPathSum(int[][] grid) {
            int dp[][]= new int[grid.length][grid[0].length];
            int m=grid.length;
            int n=grid[0].length;
            return f(m-1,n-1,grid,dp);

    }
    public static int f(int i,int j,int mat[][],int dp[][]){
        if((i==-1)||(j==-1))
            return Integer.MAX_VALUE;
        else if((i==0)&&(j==0))
            return mat[0][0];
        else{
            if(dp[i][j]!=0){
                return dp[i][j];
            }
            int t1=f(i-1,j,mat,dp);//move up
            int t2=f(i,j-1,mat,dp); //move left
            dp[i][j] = Math.min(t1,t2)+mat[i][j]; //find minimum move
            return dp[i][j];
        }
    }

    //moves right and up
    public static int minimumPathSum(int [][]grid){
        int dp[][]= new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                dp[i][j] = -1;
            }
        }
        return findSum(grid.length-1,0,grid,dp);
    }

    public static int findSum(int r, int c, int grid[][], int dp[][]){
        if((r==-1)||(c==-1) || r==grid.length || c==grid[0].length)
            return Integer.MIN_VALUE;

        if(r==0 && c == grid[0].length-1){
            return grid[0][grid[0].length-1];
        }

        if(dp[r][c] != -1){
            return dp[r][c];
        }

        int p1 = findSum(r-1,c,grid,dp);
        int p2 = findSum(r,c+1,grid,dp);
        dp[r][c] = Math.max(p1,p2)+grid[r][c];
        return dp[r][c];
    }
    public static void main(String[] args) {
        int [][]grid = {{1,3,1},{1,5,1},{4,2,1}};
        int [][]grid2 = {{0, 0, 0, 0, 5},{0, 1, 1, 1, 0},{2, 0, 0, 0, 0}};
        System.out.println("minimum path sum from top to bottom when you can move only right and down "+minPathSum(grid));
        System.out.println("minimum path sum from bottom to up when you can move only right and up "+minimumPathSum(grid2));
    }
}
